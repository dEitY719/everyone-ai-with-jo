# tox.ini: Python 프로젝트의 테스트 및 코드 품질 검사를 위한 Tox 설정 파일

[tox]
envlist = black, isort, lint, mypy, mdlint, shellcheck, shfmt
# 프로젝트를 설치 가능한 배포판(sdist/bdist)으로 빌드하는 것을 건너뜁니다.
skipsdist = true
# 시스템에 없는 파이썬 인터프리터를 건너뜁니다.
# 팀원들의 환경에 특정 파이썬 버전이 설치되어 있지 않을 경우 유용합니다.
skip_missing_interpreters = true


[testenv]
# 개발 모드로 프로젝트를 설치. 즉, 소스 코드 변경 시 재설치 없이 바로 반영
usedevelop = true  # pip install -e . // editable
# 프로젝트의 'dev' 의존성 그룹은 pyproject.toml의 [dependency-groups.dev] 섹션에 정의되어 있습니다.
deps =
    .[dev]
setenv =
    target_dir = .
allowlist_externals =
    pylint
    mypy
    markdownlint
    pylint-exit
    pytest
    shellcheck
    shfmt


[testenv:lint]
description = Run pylint to check code style and quality
deps =
    .[dev]
commands =
    pylint {env:target_dir}


[testenv:mypy]
description = Run mypy to check type hints
commands = mypy {env:target_dir}


[testenv:black]
description = Run black code formatter
deps =
    black
    black[jupyter]
commands = black {env:target_dir}


[testenv:black-check]
description = Run black code formatter (check only)
# --check와 --diff 옵션을 사용하여 실제 포맷팅을 수행하지 않고 변경 사항만 확인합니다.
commands = black {env:target_dir} --check --diff


[testenv:isort]
description = Run isort to check import sorting
deps = isort
commands = isort {env:target_dir}


[testenv:isort-check]
description = Run isort to check import sorting (check only)
# --check-only와 --diff 옵션을 사용하여 실제 정렬을 수행하지 않고 변경 사항만 확인합니다.
commands = isort {env:target_dir} --check-only --diff


[testenv:mdlint]
description = Run markdownlint on markdown files
# 이 환경은 파이썬 프로젝트 설치가 필요 없으므로 건너뜁니다.
skip_install = true
deps =
allowlist_externals =
    bash
    find
    markdownlint
commands =
    bash -c 'find . -name "*.md" -print0 | xargs -0 markdownlint --config .markdownlint.json --fix'


[testenv:shellcheck]
description = Run ShellCheck on all .sh files and .bash files
skip_install = true
deps =
allowlist_externals =
    bash
    find
    shellcheck
    xargs
commands =
    bash -c 'find bash -type f \( -name "*.sh" -o -name "*.bash" \) -print0 | xargs -0 shellcheck -x -e SC1090,SC1091'


[testenv:shfmt]
description = Check shell script formatting with shfmt
skip_install = true
deps =
commands =
    shfmt -w -i 4 bash/

[testenv:shfmt-check]
description = Check shell script formatting with shfmt
skip_install = true
deps =
commands =
    shfmt -d -i 4 bash/


# --- 파이썬 버전별 테 스트 환경 ---
# pyproject.toml의 requires-python 및 black.target-version과 일치시킵니다.
# py310, py311, py312, py313은 각 파이썬 버전별 테스트 환경.
# 이 환경에서는 pytest만 실행합니다.


[testenv:py310]
basepython = python3.10
commands = pytest


[testenv:py311]
basepython = python3.11
commands = pytest


[testenv:py312]
basepython = python3.12
commands = pytest


[testenv:py313]
basepython = python3.13
commands = pytest